{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admi\\\\Desktop\\\\WORK\\\\HAKATHON\\\\PROJECT SMART LEARNING\\\\frontend\\\\src\\\\Auth\\\\PortalContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PortalContext = /*#__PURE__*/createContext();\nexport const PortalProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedPortal, setSelectedPortal] = useState('');\n  return /*#__PURE__*/_jsxDEV(PortalContext.Provider, {\n    value: {\n      selectedPortal,\n      setSelectedPortal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n_s(PortalProvider, \"CH7ubNOyfuzyt1D4JtT7UZNnOsY=\");\n_c = PortalProvider;\nexport const usePortal = () => {\n  _s2();\n  const context = useContext(PortalContext);\n  if (!context) {\n    throw new Error('usePortal must be used within a PortalProvider');\n  }\n  return context;\n};\n_s2(usePortal, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PortalProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","PortalContext","PortalProvider","children","_s","selectedPortal","setSelectedPortal","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePortal","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Admi/Desktop/WORK/HAKATHON/PROJECT SMART LEARNING/frontend/src/Auth/PortalContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst PortalContext = createContext();\r\n\r\nexport const PortalProvider = ({ children }) => {\r\n    const [selectedPortal, setSelectedPortal] = useState('');\r\n\r\n    return (\r\n        <PortalContext.Provider value={{ selectedPortal, setSelectedPortal }}>\r\n            {children}\r\n        </PortalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const usePortal = () => {\r\n    const context = useContext(PortalContext);\r\n    if (!context) {\r\n        throw new Error('usePortal must be used within a PortalProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMM,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExD,oBACIG,OAAA,CAACC,aAAa,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,cAAc;MAAEC;IAAkB,CAAE;IAAAH,QAAA,EAChEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAACR,EAAA,CARWF,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAU3B,OAAO,MAAMY,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGlB,UAAU,CAACG,aAAa,CAAC;EACzC,IAAI,CAACe,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACrE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}